name: Generate Fresh Snapshots

on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'Branch name to run against (e.g., main, develop, feature/my-branch)'
        required: true
        default: 'main'
        type: string
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - '.github/workflows/generate-snapshots.yaml' # Only trigger if this workflow file changes

jobs:
  # Skip automatic execution on PR, but make workflow available for manual triggering
  check-trigger:
    runs-on: ubuntu-24.04
    outputs:
      should-run: ${{ steps.check.outputs.should-run }}
      target-ref: ${{ steps.check.outputs.target-ref }}
    steps:
      - name: Check execution conditions
        id: check
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "🔄 This workflow is available for manual execution on this PR"
            echo "🎯 Target branch: ${{ github.head_ref }}"
            echo "📝 To generate snapshots for this PR branch, go to Actions → Generate Fresh Snapshots → Run workflow"
            echo "should-run=false" >> $GITHUB_OUTPUT
            echo "target-ref=${{ github.head_ref }}" >> $GITHUB_OUTPUT
          else
            echo "should-run=true" >> $GITHUB_OUTPUT
            echo "target-ref=${{ inputs.ref }}" >> $GITHUB_OUTPUT
          fi

      - name: Skip for PR
        if: github.event_name == 'pull_request'
        run: |
          echo "::notice::Skipping automatic execution for PR. Workflow available for manual trigger."
          exit 1
        continue-on-error: true

  check-prerequisites:
    runs-on: ubuntu-24.04
    needs: check-trigger
    if: needs.check-trigger.outputs.should-run == 'true'
    outputs:
      workflow-run-id: ${{ steps.get-workflow.outputs.workflow-run-id }}
      workflow-status: ${{ steps.get-workflow.outputs.workflow-status }}
    steps:
      - name: Validate branch exists
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = '${{ needs.check-trigger.outputs.target-ref }}';

            try {
              await github.rest.repos.getBranch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                branch: branchName
              });
              console.log(`✅ Branch '${branchName}' exists and is valid`);
            } catch (error) {
              if (error.status === 404) {
                core.setFailed(`❌ Branch '${branchName}' does not exist in this repository. Please check the branch name and try again.`);
              } else {
                core.setFailed(`❌ Failed to validate branch '${branchName}': ${error.message}`);
              }
              return;
            }

      - name: Get latest workflow run
        id: get-workflow
        uses: actions/github-script@v7
        with:
          script: |
            const { data: runs } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'build-and-test.yaml',
              branch: '${{ needs.check-trigger.outputs.target-ref }}',
              per_page: 1,
              status: 'completed'
            });

            if (runs.total_count === 0) {
              core.setFailed(`No completed workflow runs found for branch '${{ needs.check-trigger.outputs.target-ref }}'. Make sure the build-and-test workflow has run successfully on this branch.`);
              return;
            }

            const latestRun = runs.workflow_runs[0];
            core.setOutput('workflow-run-id', latestRun.id);
            core.setOutput('workflow-status', latestRun.conclusion);

            if (latestRun.conclusion !== 'success') {
              core.setFailed(`Latest workflow run (${latestRun.id}) on branch '${{ needs.check-trigger.outputs.target-ref }}' did not complete successfully. Status: ${latestRun.conclusion}`);
            }

  generate-snapshots:
    runs-on: ubuntu-24.04
    container: mcr.microsoft.com/playwright:v1.54.2-noble
    needs: [check-trigger, check-prerequisites]
    if: needs.check-trigger.outputs.should-run == 'true'
    env:
      # See: https://github.com/microsoft/playwright/issues/27620
      HOME: /root
    steps:
      # As we are in another container, we need to install LFS manually.
      # See: https://github.com/orgs/community/discussions/160433
      - name: Install LFS
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash
          apt install git-lfs -y

      - name: Configure Git
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - uses: actions/checkout@v5
        with:
          ref: ${{ needs.check-trigger.outputs.target-ref }}
          lfs: true

      - uses: actions/setup-node@v4
        with:
          node-version: lts/jod
          cache: 'npm'

      # Download the dist artifacts from the latest successful build-and-test workflow
      - name: Download build artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Get artifacts from the successful workflow run
            const { data: artifacts } = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{ needs.check-prerequisites.outputs.workflow-run-id }}
            });

            const distArtifact = artifacts.artifacts.find(artifact => artifact.name === 'dist');
            if (!distArtifact) {
              core.setFailed('No dist artifact found in the latest workflow run');
              return;
            }

            // Download the artifact
            const download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: distArtifact.id,
              archive_format: 'zip',
            });

            fs.writeFileSync('dist.zip', Buffer.from(download.data));

      - name: Install unzip utility
        run: apt-get update && apt-get install -y unzip

      - name: Extract build artifacts
        run: |
          unzip -q dist.zip

          # Check if dist directory exists, if not, the contents might be extracted directly
          if [ ! -d "dist" ]; then
            # Look for element-examples and dashboards-demo directories
            if [ -d "element-examples" ] || [ -d "dashboards-demo" ]; then
              mkdir -p dist
              [ -d "element-examples" ] && mv element-examples dist/
              [ -d "dashboards-demo" ] && mv dashboards-demo dist/
              # Move any other potential dist contents
              for dir in */; do
                if [ "$dir" != "dist/" ] && [ "$dir" != "node_modules/" ] && [ "$dir" != ".git/" ]; then
                  mv "$dir" dist/ 2>/dev/null || true
                fi
              done
            else
              echo "ERROR: Neither dist directory nor expected contents found"
              exit 1
            fi
          fi

          # Check if playwright directory is in dist and copy it to root if needed
          if [ -d "dist/playwright" ]; then
            cp -r dist/playwright ./
          fi

      # Not injecting the token will exclude the brand packages, but this is fine for e2e tests.
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --include=optional

      # Fix Docker config permission issue
      - name: Fix Docker permissions
        run: |
          mkdir -p /root/.docker
          chmod 755 /root/.docker
          # Create a minimal Docker config to avoid permission errors
          echo '{}' > /root/.docker/config.json
          chmod 644 /root/.docker/config.json

      # Install http-server globally to ensure it's available
      - name: Install http-server
        run: npm install -g http-server

      # Test if the web servers can start properly
      - name: Test web server startup
        run: |
          if [ ! -d "dist/element-examples" ]; then
            echo "dist/element-examples directory not found"
            exit 1
          fi

          if [ ! -d "dist/dashboards-demo" ]; then
            echo "dist/dashboards-demo directory not found"
            exit 1
          fi

          # Quick test that servers can start
          timeout 10s npx http-server dist/element-examples -s -p 4200 -a 127.0.0.1 &
          SERVER_PID=$!
          sleep 5
          curl -f http://127.0.0.1:4200/ > /dev/null 2>&1 || (echo "element-examples server failed" && exit 1)
          kill $SERVER_PID || true

          timeout 10s npx http-server dist/dashboards-demo -s -p 4201 -a 127.0.0.1 &
          SERVER_PID=$!
          sleep 5
          curl -f http://127.0.0.1:4201/ > /dev/null 2>&1 || (echo "dashboards-demo server failed" && exit 1)
          kill $SERVER_PID || true

      - name: Generate fresh snapshots
        run: |
          # If playwright directory is still missing, try to copy from dist
          if [ ! -d "playwright/e2e" ] && [ -d "dist/playwright/e2e" ]; then
            cp -r dist/playwright ./
          fi

          if [ ! -d "playwright/e2e" ]; then
            echo "ERROR: playwright/e2e directory is missing!"
            exit 1
          fi

          npx playwright test --update-snapshots=all
        env:
          PLAYWRIGHT_CONTAINER: true
          PLAYWRIGHT_isvrt: 'true'
          PLAYWRIGHT_isa11y: 'false'
          # Increase web server timeout for container environment
          PLAYWRIGHT_WEB_SERVER_TIMEOUT: 120000

      - name: Create snapshots archive
        run: |
          # Create a timestamped archive of the updated snapshots
          TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
          BRANCH_NAME="${{ inputs.ref || github.ref_name }}"

          # Sanitize branch name by replacing invalid characters for artifact names
          # Replace forward slashes, colons, and other invalid characters with hyphens
          SAFE_BRANCH_NAME=$(echo "$BRANCH_NAME" | sed 's/[\/\\:*?"<>|]/-/g')

          ARCHIVE_NAME="playwright-snapshots-${SAFE_BRANCH_NAME}-${TIMESTAMP}"

          # Create archive directory structure
          mkdir -p "${ARCHIVE_NAME}"
          cp -r playwright/snapshots "${ARCHIVE_NAME}/"

          # Add metadata file
          cat > "${ARCHIVE_NAME}/snapshot-info.txt" << EOF
          Generated on: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          Branch/Ref: ${BRANCH_NAME}
          Commit SHA: ${{ github.sha }}
          Workflow Run: ${{ github.run_id }}
          Generated from workflow run: ${{ needs.check-prerequisites.outputs.workflow-run-id }}
          EOF

          # Create tar.gz archive
          tar -czf "${ARCHIVE_NAME}.tar.gz" "${ARCHIVE_NAME}"

          echo "ARCHIVE_NAME=${ARCHIVE_NAME}" >> $GITHUB_ENV

      - name: Upload fresh snapshots
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARCHIVE_NAME }}
          path: ${{ env.ARCHIVE_NAME }}.tar.gz
          retention-days: 30

      - name: Generate test report
        if: always()
        run: npx playwright show-report --reporter=html || true

      - name: Upload test report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-snapshots-${{ github.run_id }}
          path: playwright-report
          retention-days: 7

  summary:
    runs-on: ubuntu-24.04
    needs: [check-trigger, check-prerequisites, generate-snapshots]
    if: always() && needs.check-trigger.outputs.should-run == 'true'
    steps:
      - name: Generate summary
        run: |
          echo "## Snapshot Generation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch/Ref:** ${{ needs.check-trigger.outputs.target-ref }}" >> $GITHUB_STEP_SUMMARY
          echo "**Based on workflow run:** ${{ needs.check-prerequisites.outputs.workflow-run-id }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ needs.generate-snapshots.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.generate-snapshots.result }}" = "success" ]; then
            echo "✅ Fresh snapshots have been generated successfully!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The updated snapshots are available as downloadable artifacts from this workflow run." >> $GITHUB_STEP_SUMMARY
            echo "Look for the artifact named \`playwright-snapshots-*\` in the artifacts section." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Snapshot generation failed. Check the logs for details." >> $GITHUB_STEP_SUMMARY
          fi
