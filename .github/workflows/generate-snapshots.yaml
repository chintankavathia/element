name: Generate Fresh Snapshots

on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'Branch name to run against (e.g., main, develop, feature/my-branch)'
        required: true
        default: 'main'
        type: string
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - '.github/workflows/generate-snapshots.yaml' # Only trigger if this workflow file changes

jobs:
  generate-snapshots:
    runs-on: ubuntu-24.04
    container: mcr.microsoft.com/playwright:v1.54.2-noble
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'pull_request' && github.run_attempt > 1)
    env:
      # See: https://github.com/microsoft/playwright/issues/27620
      HOME: /root
    steps:
      - name: Check execution conditions and set target ref
        id: check
        run: |
          echo "should-run=true" >> $GITHUB_OUTPUT
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "target-ref=${{ inputs.ref }}" >> $GITHUB_OUTPUT
          else
            # For PR re-runs, use the head ref
            echo "target-ref=${{ github.head_ref }}" >> $GITHUB_OUTPUT
          fi

      - name: Validate branch exists
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = '${{ steps.check.outputs.target-ref }}';

            try {
              await github.rest.repos.getBranch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                branch: branchName
              });
              console.log(`✅ Branch '${branchName}' exists and is valid`);
            } catch (error) {
              if (error.status === 404) {
                core.setFailed(`❌ Branch '${branchName}' does not exist in this repository. Please check the branch name and try again.`);
              } else {
                core.setFailed(`❌ Failed to validate branch '${branchName}': ${error.message}`);
              }
              return;
            }

      - name: Get latest workflow run
        id: get-workflow
        uses: actions/github-script@v7
        with:
          script: |
            const { data: runs } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'build-and-test.yaml',
              branch: '${{ steps.check.outputs.target-ref }}',
              per_page: 10,
              status: 'completed'
            });

            if (runs.total_count === 0) {
              core.setFailed(`No completed workflow runs found for branch '${{ steps.check.outputs.target-ref }}'. Make sure the build-and-test workflow has run on this branch.`);
              return;
            }

            // Find the most recent run that has the required jobs completed successfully
            const requiredJobs = ['build', 'test', 'aot'];
            let latestValidRun = null;

            for (const run of runs.workflow_runs) {
              try {
                // Get jobs for this workflow run
                const { data: jobs } = await github.rest.actions.listJobsForWorkflowRun({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: run.id
                });

                // Check if all required jobs completed successfully
                const jobStatuses = {};
                for (const job of jobs.jobs) {
                  jobStatuses[job.name] = job.conclusion;
                }

                console.log(`Checking run ${run.id}: Jobs found:`, Object.keys(jobStatuses));
                console.log(`Job statuses:`, jobStatuses);

                const allRequiredJobsSuccessful = requiredJobs.every(jobName => 
                  jobStatuses[jobName] === 'success'
                );

                if (allRequiredJobsSuccessful) {
                  latestValidRun = run;
                  console.log(`✅ Found valid run ${run.id} with all required jobs successful`);
                  break;
                } else {
                  const failedJobs = requiredJobs.filter(jobName => 
                    !jobStatuses[jobName] || jobStatuses[jobName] !== 'success'
                  );
                  console.log(`❌ Run ${run.id} missing or failed jobs:`, failedJobs);
                }
              } catch (error) {
                console.log(`Error checking run ${run.id}:`, error.message);
                continue;
              }
            }

            if (!latestValidRun) {
              core.setFailed(`No workflow runs found for branch '${{ steps.check.outputs.target-ref }}' with successful completion of required jobs: ${requiredJobs.join(', ')}. Make sure build, test, and aot jobs have completed successfully.`);
              return;
            }

            core.setOutput('workflow-run-id', latestValidRun.id);
            core.setOutput('workflow-status', latestValidRun.conclusion);

            console.log(`Using workflow run ${latestValidRun.id} with required jobs completed successfully`);
            console.log(`Overall workflow status: ${latestValidRun.conclusion} (note: overall status may be different, but required jobs are successful)`);

            // Create a summary of what we found
            const { data: jobs } = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: latestValidRun.id
            });

            const requiredJobStatuses = requiredJobs.map(jobName => {
              const job = jobs.jobs.find(j => j.name === jobName);
              return `${jobName}: ${job ? job.conclusion : 'not found'}`;
            }).join(', ');

            core.notice(`Using workflow run ${latestValidRun.id} | Required jobs status: ${requiredJobStatuses}`);

      # As we are in another container, we need to install LFS manually.
      # See: https://github.com/orgs/community/discussions/160433
      - name: Install LFS
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash
          apt install git-lfs -y

      - name: Configure Git
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - uses: actions/checkout@v5
        with:
          ref: ${{ steps.check.outputs.target-ref }}
          lfs: true

      - uses: actions/setup-node@v4
        with:
          node-version: lts/jod
          cache: 'npm'

      # Download the dist artifacts from the latest successful build-and-test workflow
      - name: Download build artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Get artifacts from the successful workflow run
            const { data: artifacts } = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{ steps.get-workflow.outputs.workflow-run-id }}
            });

            const distArtifact = artifacts.artifacts.find(artifact => artifact.name === 'dist');
            if (!distArtifact) {
              core.setFailed('No dist artifact found in the latest workflow run');
              return;
            }

            // Download the artifact
            const download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: distArtifact.id,
              archive_format: 'zip',
            });

            fs.writeFileSync('dist.zip', Buffer.from(download.data));

      - name: Install unzip utility
        run: apt-get update && apt-get install -y unzip

      - name: Extract build artifacts
        run: |
          unzip -q dist.zip

          # Check if dist directory exists, if not, the contents might be extracted directly
          if [ ! -d "dist" ]; then
            # Look for element-examples and dashboards-demo directories
            if [ -d "element-examples" ] || [ -d "dashboards-demo" ]; then
              mkdir -p dist
              [ -d "element-examples" ] && mv element-examples dist/
              [ -d "dashboards-demo" ] && mv dashboards-demo dist/
              # Move any other potential dist contents
              for dir in */; do
                if [ "$dir" != "dist/" ] && [ "$dir" != "node_modules/" ] && [ "$dir" != ".git/" ]; then
                  mv "$dir" dist/ 2>/dev/null || true
                fi
              done
            else
              echo "ERROR: Neither dist directory nor expected contents found"
              exit 1
            fi
          fi

          # Check if playwright directory is in dist and copy it to root if needed
          if [ -d "dist/playwright" ]; then
            cp -r dist/playwright ./
          fi

      # Not injecting the token will exclude the brand packages, but this is fine for e2e tests.
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --include=optional

      # Fix Docker config permission issue
      - name: Fix Docker permissions
        run: |
          mkdir -p /root/.docker
          chmod 755 /root/.docker
          # Create a minimal Docker config to avoid permission errors
          echo '{}' > /root/.docker/config.json
          chmod 644 /root/.docker/config.json

      # Install http-server globally to ensure it's available
      - name: Install http-server
        run: npm install -g http-server

      # Test if the web servers can start properly
      - name: Test web server startup
        run: |
          if [ ! -d "dist/element-examples" ]; then
            echo "dist/element-examples directory not found"
            exit 1
          fi

          if [ ! -d "dist/dashboards-demo" ]; then
            echo "dist/dashboards-demo directory not found"
            exit 1
          fi

          # Quick test that servers can start
          timeout 10s npx http-server dist/element-examples -s -p 4200 -a 127.0.0.1 &
          SERVER_PID=$!
          sleep 5
          curl -f http://127.0.0.1:4200/ > /dev/null 2>&1 || (echo "element-examples server failed" && exit 1)
          kill $SERVER_PID || true

          timeout 10s npx http-server dist/dashboards-demo -s -p 4201 -a 127.0.0.1 &
          SERVER_PID=$!
          sleep 5
          curl -f http://127.0.0.1:4201/ > /dev/null 2>&1 || (echo "dashboards-demo server failed" && exit 1)
          kill $SERVER_PID || true

      - name: Generate fresh snapshots
        run: |
          # If playwright directory is still missing, try to copy from dist
          if [ ! -d "playwright/e2e" ] && [ -d "dist/playwright/e2e" ]; then
            cp -r dist/playwright ./
          fi

          if [ ! -d "playwright/e2e" ]; then
            echo "ERROR: playwright/e2e directory is missing!"
            exit 1
          fi

          # Remove existing snapshots to ensure we generate fresh ones
          if [ -d "playwright/snapshots" ]; then
            echo "Removing existing snapshots to ensure fresh generation..."
            rm -rf playwright/snapshots
          fi

          # Create snapshots directory
          mkdir -p playwright/snapshots

          echo "Starting fresh snapshot generation..."
          npx playwright test --update-snapshots=all

          # Verify that snapshots were generated
          if [ ! -d "playwright/snapshots" ] || [ -z "$(ls -A playwright/snapshots 2>/dev/null)" ]; then
            echo "ERROR: No snapshots were generated!"
            exit 1
          fi

          echo "Snapshots generated successfully:"
          find playwright/snapshots -type f -name "*.png" | head -10
        env:
          PLAYWRIGHT_CONTAINER: true
          PLAYWRIGHT_isvrt: 'true'
          PLAYWRIGHT_isa11y: 'false'
          # Increase web server timeout for container environment
          PLAYWRIGHT_WEB_SERVER_TIMEOUT: 120000

      - name: Create snapshots archive
        run: |
          # Verify that snapshots exist and were recently modified
          if [ ! -d "playwright/snapshots" ]; then
            echo "ERROR: playwright/snapshots directory does not exist!"
            exit 1
          fi

          SNAPSHOT_COUNT=$(find playwright/snapshots -type f -name "*.png" | wc -l)
          if [ "$SNAPSHOT_COUNT" -eq 0 ]; then
            echo "ERROR: No snapshot files found in playwright/snapshots!"
            exit 1
          fi

          echo "Found $SNAPSHOT_COUNT snapshot files"
          echo "Recent snapshot files:"
          find playwright/snapshots -type f -name "*.png" -mmin -60 | head -5

          # Create a timestamped archive of the updated snapshots
          TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
          BRANCH_NAME="${{ inputs.ref || github.ref_name }}"

          # Sanitize branch name by replacing invalid characters for artifact names
          # Replace forward slashes, colons, and other invalid characters with hyphens
          SAFE_BRANCH_NAME=$(echo "$BRANCH_NAME" | sed 's/[\/\\:*?"<>|]/-/g')

          ARCHIVE_NAME="playwright-snapshots-${SAFE_BRANCH_NAME}-${TIMESTAMP}"

          # Create archive directory structure
          mkdir -p "${ARCHIVE_NAME}"
          cp -r playwright/snapshots "${ARCHIVE_NAME}/"

          # Verify the copy was successful
          COPIED_COUNT=$(find "${ARCHIVE_NAME}/snapshots" -type f -name "*.png" | wc -l)
          echo "Copied $COPIED_COUNT snapshot files to archive"

          if [ "$COPIED_COUNT" -ne "$SNAPSHOT_COUNT" ]; then
            echo "WARNING: Snapshot count mismatch! Original: $SNAPSHOT_COUNT, Copied: $COPIED_COUNT"
          fi

          # Add metadata file
          cat > "${ARCHIVE_NAME}/snapshot-info.txt" << EOF
          Generated on: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          Branch/Ref: ${BRANCH_NAME}
          Commit SHA: ${{ github.sha }}
          Workflow Run: ${{ github.run_id }}
          Generated from workflow run: ${{ steps.get-workflow.outputs.workflow-run-id }}
          Total snapshot files: ${SNAPSHOT_COUNT}
          EOF

          # Create tar.gz archive
          tar -czf "${ARCHIVE_NAME}.tar.gz" "${ARCHIVE_NAME}"

          echo "ARCHIVE_NAME=${ARCHIVE_NAME}" >> $GITHUB_ENV
          echo "Archive created: ${ARCHIVE_NAME}.tar.gz"

      - name: Upload fresh snapshots
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARCHIVE_NAME }}
          path: ${{ env.ARCHIVE_NAME }}.tar.gz
          retention-days: 30

      - name: Get artifact download URL
        if: success()
        id: artifact
        uses: actions/github-script@v7
        with:
          script: |
            // Wait a bit for the artifact to be uploaded and indexed
            await new Promise(resolve => setTimeout(resolve, 5000));

            // Get artifacts from the current workflow run
            const { data: artifacts } = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });

            const artifactName = process.env.ARCHIVE_NAME;
            const artifact = artifacts.artifacts.find(a => a.name === artifactName);

            if (!artifact) {
              console.log(`Available artifacts: ${artifacts.artifacts.map(a => a.name).join(', ')}`);
              core.setFailed(`Artifact '${artifactName}' not found`);
              return;
            }

            // Get the current workflow run
            const { data: workflowRun } = await github.rest.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });

            // Create direct artifact download URL
            const downloadUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}/artifacts/${artifact.id}`;

            core.setOutput('download_url', downloadUrl);
            core.setOutput('artifact_name', artifactName);
            core.setOutput('artifact_id', artifact.id);
            core.setOutput('workflow_url', workflowRun.html_url);

      - name: Comment on PR with download link
        if: success() && github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          message: |
            [⬇️ Download Snapshots](${{ steps.artifact.outputs.download_url }})

      - name: Find and comment on related PR
        if: success() && github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = '${{ inputs.ref }}';
            const workflowUrl = '${{ steps.artifact.outputs.workflow_url }}';

            // Try to find an open PR for this branch
            const { data: pulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${branchName}`,
              state: 'open'
            });

            if (pulls.length > 0) {
              const pr = pulls[0];
              console.log(`Found PR #${pr.number} for branch: ${branchName}`);
              core.setOutput('pr_number', pr.number);
              core.setOutput('found_pr', 'true');
            } else {
              console.log(`No open PR found for branch: ${branchName}`);
              core.setOutput('found_pr', 'false');
            }

      - name: Comment on related PR
        if: success() && github.event_name == 'workflow_dispatch' && steps.find-and-comment-on-related-pr.outputs.found_pr == 'true'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          number: ${{ steps.find-and-comment-on-related-pr.outputs.pr_number }}
          message: |
            [⬇️ Download Snapshots](${{ steps.artifact.outputs.download_url }})

      - name: Generate test report
        if: always()
        run: npx playwright show-report --reporter=html || true

      - name: Upload test report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-snapshots-${{ github.run_id }}
          path: playwright-report
          retention-days: 7

      - name: Generate summary
        if: always()
        run: |
          echo "## Snapshot Generation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "**Execution Type:** PR Re-run" >> $GITHUB_STEP_SUMMARY
            echo "**PR Branch:** ${{ github.head_ref }}" >> $GITHUB_STEP_SUMMARY
            echo "**Target Branch:** ${{ steps.check.outputs.target-ref }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Execution Type:** Manual Dispatch" >> $GITHUB_STEP_SUMMARY
            echo "**Branch/Ref:** ${{ steps.check.outputs.target-ref }}" >> $GITHUB_STEP_SUMMARY
          fi

          echo "**Based on workflow run:** ${{ steps.get-workflow.outputs.workflow-run-id }} (build, test, aot jobs completed)" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ Fresh snapshots have been generated successfully!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY            
            echo "The updated snapshots are available as downloadable artifacts from this workflow run." >> $GITHUB_STEP_SUMMARY
            echo "Look for the artifact named \`playwright-snapshots-*\` in the artifacts section." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Snapshot generation failed. Check the logs for details." >> $GITHUB_STEP_SUMMARY
          fi
